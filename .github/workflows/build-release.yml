name: build release
on:
  # push:
  #   branches:
  #     - release
  # pull_request:
  #   branches:
  #     - release
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash -el {0}
    env:
      CUDA_SUB_PACKAGES: 
      CUDA_PATH: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1"
    strategy:
      matrix:
        # https://en.wikipedia.org/wiki/CUDA#GPUs_supported
        artifact: [
          {
            arch: "75",
            name: "Turing",
            gpus: "RTX 2060 - 2080 & Ti, Quadro RTX 4000 - 8000"
          },
          {
            arch: "86",
            name: "Ampere",
            gpus: "RTX 3050 - 3090 & Ti, RTX A2000 - A6000"
          },
          {
            arch: "89",
            name: "Lovelace",
            gpus: "RTX 4070 - 4090, RTX 6000 Ada"
          }
        ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
          submodules: recursive
      
      - name: Install CMake
        uses: lukka/get-cmake@v3.24.2
        
      - name: Install CUDA Toolkit
        uses: JamesPerlman/get-cuda-toolkit@master
        if: steps.cache-cuda-toolkit-restore.outputs.cache-hit != 'true'
        id: cuda-toolkit
        with:
          cuda: "12.1.0"
          method: 'network'
          sub-packages: '[
            "cublas",
            "cublas_dev",
            "cudart",
            "curand",
            "curand_dev",
            "nvcc",
            "nvrtc",
            "nvrtc_dev",
            "thrust",
            "visual_studio_integration"
          ]'

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: py310
          environment-file: etc/py310.yml
          auto-activate-base: false

      - name: CMake Configure
        env:
          CUDA_ARCH_LIST: ${{ matrix.artifact.arch }}
          TCNN_CUDA_ARCHITECTURES: ${{ matrix.artifact.arch }}
        run: |
          cmake . \
            -B build \
            -G "Visual Studio 17 2022" \
            -A x64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DPYTHON_EXECUTABLE="${CONDA_PREFIX}\\python.exe" \
            -DTN_BUILD_PYD=ON \
            -DTN_BUILD_EXE=OFF

      - name: CMake Build
        run: cmake --build build --config Release -j
      
      - name: Archive Build Result
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          directory: build/Release/
          path: .
          filename: '../archive/PyTurboNeRF-${{ matrix.artifact.name }}.zip'

      - name: Upload Binaries
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: 'build/archive/PyTurboNeRF-${{ matrix.artifact.name }}.zip'
          bodyFile: etc/pre-release.md
          commit: ${{ github.sha }}
          makeLatest: true
          name: 'PyTurboNeRF Pre-Release Binaries'
          prerelease: true
          replacesArtifacts: true
          tag: 'pre-release'
          token: ${{ secrets.GITHUB_TOKEN }}
