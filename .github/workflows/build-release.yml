name: build release
on:
  # push:
  #   branches:
  #     - release
  # pull_request:
  #   branches:
  #     - release
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash -el {0}
    env:
      CUDA_VERSION: "12.1.0"
      CUDA_SUB_PACKAGES: '["cublas", "cublas_dev", "cudart", "curand", "curand_dev", "nvcc", "nvrtc", "nvrtc_dev", "thrust", "visual_studio_integration"]'
      CUDA_PATH: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1"
    strategy:
      matrix:
        # https://en.wikipedia.org/wiki/CUDA#GPUs_supported
        artifact: [
          {
            arch: "75",
            name: "Turing",
            gpus: "RTX 2060 - 2080 & Ti, Quadro RTX 4000 - 8000"
          },
          {
            arch: "86",
            name: "Ampere",
            gpus: "RTX 3050 - 3090 & Ti, RTX A2000 - A6000"
          },
          {
            arch: "89",
            name: "Lovelace",
            gpus: "RTX 4070 - 4090, RTX 6000 Ada"
          }
        ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
          submodules: recursive
      
      - name: Install CMake
        uses: lukka/get-cmake@v3.24.2

#       - name: Set CUDA Cache Key
#         run: echo "INSTALL_CUDA_TOOLKIT_CACHE_KEY=cache-key" >> $GITHUB_ENV
# #          echo "INSTALL_CUDA_TOOLKIT_CACHE_KEY=cuda-cuda-${{ runner.os }}-${CUDA_VERSION}-$(echo $CUDA_SUB_PACKAGES | tr -d '[:space:]\[\]\",')" >> $GITHUB_ENV

      - name: Cache CUDA Toolkit
        uses: actions/cache@v3
        id: cache-cuda-toolkit
        with:
          path: ${{ env.CUDA_PATH }}
          key: abc
        
      - name: Install CUDA Toolkit
        uses: JamesPerlman/get-cuda-toolkit@master
        if: steps.cache-cuda-toolkit-restore.outputs.cache-hit != 'true'
        id: cuda-toolkit
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: 'network'
          sub-packages: ${{ env.CUDA_SUB_PACKAGES }}

      # - name: Setup Conda
      #   uses: conda-incubator/setup-miniconda@v2.2.0
      #   with:
      #     activate-environment: py310
      #     environment-file: etc/py310.yml
      #     auto-activate-base: false

      # - name: CMake Configure
      #   env:
      #     CUDA_ARCH_LIST: ${{ matrix.artifact.arch }}
      #     TCNN_CUDA_ARCHITECTURES: ${{ matrix.artifact.arch }}
      #   run: |
      #     cmake . \
      #       -B build \
      #       -G "Visual Studio 17 2022" \
      #       -A x64 \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -DPYTHON_EXECUTABLE="${CONDA_PREFIX}\\python.exe" \
      #       -DTN_BUILD_PYD=ON \
      #       -DTN_BUILD_EXE=OFF
        
      # - name: Cache CMake Build
      #   uses: actions/cache@v3
      #   id: cache-cmake-build
      #   with:
      #     path: build
      #     key: latest-cmake-build-${{ matrix.artifact.name }}

      # - name: CMake Build
      #   run: cmake --build build --config Release -j
      
      # - name: Archive Build Result
      #   uses: thedoctor0/zip-release@0.7.1
      #   with:
      #     type: 'zip'
      #     path: build/Release/
      #     filename: 'TurboNeRF-${{ matrix.artifact.name }}.zip'

      # - name: Upload Binaries
      #   uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     artifacts: 'TurboNeRF-${{ matrix.artifact.name }}.zip'
      #     # body: 'Binary for NVIDIA ${{ matrix.artifact.name }} GPUs: ${{ matrix.artifact.gpus }}'
      #     commit: ${{ github.sha }}
      #     makeLatest: true
      #     name: 'TurboNeRF Pre-Release (${{ matrix.artifact.name }})'
      #     prerelease: true
      #     replacesArtifacts: true
      #     tag: 'pre-release'
      #     token: ${{ secrets.GITHUB_TOKEN }}
